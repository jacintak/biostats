exams2html(list("question6.Rmd"), edir = paste0(mydir,"/questions"), solution = T)
source('C:/Users/kongj/OneDrive - TCDUD.onmicrosoft.com/Teaching/Biostats/Midsem MCQ/generate.exam.R', echo=TRUE)
runif(1)
##
# This question has multiple correct answers based on interpreting randomly generated linear models
##
## regression parameters
da <- data.frame(predictor = runif(100, 1, 100), group = 'Group A')
b <- runif(1)
da$response <-  b * da$predictor + rnorm(100, sd = 10)
db <- data.frame(predictor = runif(100, 1, 100), group = 'Group B')
b <- runif(1)
db$response <- b * db$predictor + rnorm(100, sd = 10)
# make negative
if(runif(1) < 0.5){
db$response  <-  rev(db$response)
}
d <- rbind(da,db)
#regression
m <- glm(response ~ predictor * group, data = d, family = 'gaussian')
slopeA <- round(coef(m)[2], digits = 3)
interceptA <- round(coef(m)[1], digits = 3)
slopeB <- slopeA + round(coef(m)[4], digits = 3)
interceptB <- interceptA + round(coef(m)[3], digits = 3)
summary(m)
library(ggplot2)
ggplot(d, aes(predictor, response, colour = group)) + geom_point() + geom_smooth(method = "lm", se = F, lwd = 2) + theme_classic()
## ANSWER GENERATION
answers <- character(5)
if (summary(m)$coefficients[4, 4] <= 0.05) {
# p value of the interaction is significant
answers[1] <-
"The effect of the continuous predictor variable on the response variable is dependent on the identity of the group"
answers[2] <-
"There is an interaction between the two predictor variables"
answers[3] <-
"There are synergistic or antagonistic effects between predictor variables on the response variable"
answers[4] <-
"The linear models are fitted based on a binomial probability distribution function"
} else {
answers[1] <-
"The effect of the continuous predictor variable on the response variable is independent on the identity of the group"
answers[2] <-
"There is no interaction between the two predictor variables"
answers[3] <-
"There are no synergistic or antagonistic effects between predictor variables on the response variable"
answers[4] <-
"The linear models are fitted based on a non-normal probability distribution function"
}
answers[5] <- "All of these statements are true"
answerlist(answers, markup = "markdown")
da <- data.frame(predictor = runif(100, 1, 100), group = 'Group A')
b <- runif(1)
da$response <-  b * da$predictor + rnorm(100, sd = 10)
db <- data.frame(predictor = runif(100, 1, 100), group = 'Group B')
b <- runif(1)
db$response <- b * db$predictor + rnorm(100, sd = 10)
db$response  <-  rev(db$response)
d <- rbind(da,db)
#regression
m <- glm(response ~ predictor * group, data = d, family = 'gaussian')
summary(m)
library(ggplot2)
ggplot(d, aes(predictor, response, colour = group)) + geom_point() + geom_smooth(method = "lm", se = F, lwd = 2) + theme_classic()
b  <-  runif(1, min = -1, max = 0)
b
rep(runif(1, min = -1, max = 0), 50)
runif(1, min = -1, max = 0)
runif(1, min = -1, max = 0)
runif(1, min = -1, max = 0)
runif(1, min = -1, max = 0)
runif(1, min = -1, max = 0)
runif(1, min = -1, max = 0)
# make negative
if(runif(1) < 0.5){
b  <-  runif(1)
} else {
b  <-  runif(1, min = -1, max = 0)
}
b
exams2html(list("question6.Rmd"), edir = paste0(mydir,"/questions"))
## load package and enforce par(ask = FALSE)
library("exams")
## content and output directory
mydir <- "C:/Users/kongj/OneDrive - TCDUD.onmicrosoft.com/Teaching/Biostats/Midsem MCQ"
exams2html(list("question6.Rmd"), edir = paste0(mydir,"/questions"))
sample(-50:50, 1)
sample(-50:50, 1)
sample(-50:50, 1)
sample(-50:50, 1)
replicate(sample(-50:50, 1))
replicate(sample(-50:50, 1),10)
replicate(10, sample(-50:50, 1)
)
replicate(10, runif(1))
b <- runif(1)
db <- data.frame(predictor = runif(100, 1, 100), group = 'Group B')
b  <-  -b # interaction
c  <- 25
db$response <- b * db$predictor + rnorm(100, sd = 10) + c
d <- rbind(da,db)
#regression
m <- glm(response ~ predictor * group, data = d, family = 'gaussian')
summary(m)
library(ggplot2)
ggplot(d, aes(predictor, response, colour = group)) + geom_point() + geom_smooth(method = "lm", se = F, lwd = 2) + theme_classic()
b <- runif(1)
db <- data.frame(predictor = runif(100, 1, 100), group = 'Group B')
b  <-  -b # interaction
c  <- 25
db$response <- b * db$predictor + rnorm(100, sd = 10) + c
d <- rbind(da,db)
#regression
m <- glm(response ~ predictor * group, data = d, family = 'gaussian')
library(ggplot2)
ggplot(d, aes(predictor, response, colour = group)) + geom_point() + geom_smooth(method = "lm", se = F, lwd = 2) + theme_classic()
b <- runif(1)
db <- data.frame(predictor = runif(100, 1, 100), group = 'Group B')
b  <-  -b # interaction
c  <- 25
db$response <- b * db$predictor + rnorm(100, sd = 10) + c
d <- rbind(da,db)
#regression
m <- glm(response ~ predictor * group, data = d, family = 'gaussian')
summary(m)
library(ggplot2)
ggplot(d, aes(predictor, response, colour = group)) + geom_point() + geom_smooth(method = "lm", se = F, lwd = 2) + theme_classic()
b <- runif(1)
db <- data.frame(predictor = runif(100, 1, 100), group = 'Group B')
b  <-  -b # interaction
c  <- 25
db$response <- b * db$predictor + rnorm(100, sd = 10) + c
d <- rbind(da,db)
#regression
m <- glm(response ~ predictor * group, data = d, family = 'gaussian')
summary(m)
library(ggplot2)
ggplot(d, aes(predictor, response, colour = group)) + geom_point() + geom_smooth(method = "lm", se = F, lwd = 2) + theme_classic()
b
da$response <-  b * da$predictor + rnorm(100, sd = 10)
summary(m)
library(ggplot2)
ggplot(d, aes(predictor, response, colour = group)) + geom_point() + geom_smooth(method = "lm", se = F, lwd = 2) + theme_classic()
da$response <-  b * da$predictor + rnorm(100, sd = 10)
d <- rbind(da,db)
#regression
m <- glm(response ~ predictor * group, data = d, family = 'gaussian')
summary(m)
library(ggplot2)
ggplot(d, aes(predictor, response, colour = group)) + geom_point() + geom_smooth(method = "lm", se = F, lwd = 2) + theme_classic()
b  <-  -b # interaction
c  <- 25
db$response <- b * db$predictor + rnorm(100, sd = 10) + c
d <- rbind(da,db)
#regression
m <- glm(response ~ predictor * group, data = d, family = 'gaussian')
summary(m)
library(ggplot2)
ggplot(d, aes(predictor, response, colour = group)) + geom_point() + geom_smooth(method = "lm", se = F, lwd = 2) + theme_classic()
da <- data.frame(predictor = runif(100, 1, 100), group = 'Group A')
b <- runif(1)
da$response <-  b * da$predictor + rnorm(100, sd = 10)
db <- data.frame(predictor = runif(100, 1, 100), group = 'Group B')
b  <-  -b # interaction
c  <- 0
db$response <- b * db$predictor + rnorm(100, sd = 10) + c
d <- rbind(da,db)
#regression
m <- glm(response ~ predictor * group, data = d, family = 'gaussian')
summary(m)
library(ggplot2)
ggplot(d, aes(predictor, response, colour = group)) + geom_point() + geom_smooth(method = "lm", se = F, lwd = 2) + theme_classic()
da <- data.frame(predictor = runif(100, 1, 100), group = 'Group A')
b <- runif(1)
da$response <-  b * da$predictor + rnorm(100, sd = 10)
db <- data.frame(predictor = runif(100, 1, 100), group = 'Group B')
b  <-  runif(1, min = -1, max = 0) # interaction
c  <- 0
db$response <- b * db$predictor + rnorm(100, sd = 10) + c
d <- rbind(da,db)
#regression
m <- glm(response ~ predictor * group, data = d, family = 'gaussian')
summary(m)
library(ggplot2)
ggplot(d, aes(predictor, response, colour = group)) + geom_point() + geom_smooth(method = "lm", se = F, lwd = 2) + theme_classic()
c  <- 50
db$response <- b * db$predictor + rnorm(100, sd = 10) + c
d <- rbind(da,db)
#regression
m <- glm(response ~ predictor * group, data = d, family = 'gaussian')
summary(m)
library(ggplot2)
ggplot(d, aes(predictor, response, colour = group)) + geom_point() + geom_smooth(method = "lm", se = F, lwd = 2) + theme_classic()
da <- data.frame(predictor = runif(100, 1, 100), group = 'Group A')
b <- runif(1)
da$response <-  b * da$predictor + rnorm(100, sd = 10)
db <- data.frame(predictor = runif(100, 1, 100), group = 'Group B')
b  <-  runif(1, min = -1, max = 0) # interaction
c  <- 50
db$response <- b * db$predictor + rnorm(100, sd = 10) + c
d <- rbind(da,db)
#regression
m <- glm(response ~ predictor * group, data = d, family = 'gaussian')
summary(m)
library(ggplot2)
ggplot(d, aes(predictor, response, colour = group)) + geom_point() + geom_smooth(method = "lm", se = F, lwd = 2) + theme_classic()
da <- data.frame(predictor = runif(100, 1, 100), group = 'Group A')
b <- runif(1)
da$response <-  b * da$predictor + rnorm(100, sd = 10)
db <- data.frame(predictor = runif(100, 1, 100), group = 'Group B')
b  <-  b # additive
c  <- sample(-50:50, 1)
db$response <- b * db$predictor + rnorm(100, sd = 10) + c
d <- rbind(da,db)
#regression
m <- glm(response ~ predictor * group, data = d, family = 'gaussian')
summary(m)
library(ggplot2)
ggplot(d, aes(predictor, response, colour = group)) + geom_point() + geom_smooth(method = "lm", se = F, lwd = 2) + theme_classic()
b <- runif(1)
da <- data.frame(predictor = runif(100, 1, 100), group = 'Group A')
b <- runif(1)
da$response <-  b * da$predictor + rnorm(100, sd = 10)
db <- data.frame(predictor = runif(100, 1, 100), group = 'Group B')
b  <-  runif(1, min = -1, max = 0) # interaction
c  <- 50
db$response <- b * db$predictor + rnorm(100, sd = 10) + c
d <- rbind(da,db)
#regression
m <- glm(response ~ predictor * group, data = d, family = 'gaussian')
summary(m)
library(ggplot2)
ggplot(d, aes(predictor, response, colour = group)) + geom_point() + geom_smooth(method = "lm", se = F, lwd = 2) + theme_classic()
source('C:/Users/kongj/OneDrive - TCDUD.onmicrosoft.com/Teaching/Biostats/Midsem MCQ/generate.exam.R', echo=TRUE)
if (runif(1) < 0.5) {
answers[4] <- "The mean of the predictor variable is at most `r sample(30:60, 1)`"
} else {
answers[4] <- "The mean of the response variable is at least 50"
}
## ANSWER GENERATION
answers <- character(5)
if (runif(1) < 0.5) {
answers[4] <- "The mean of the predictor variable is at most `r sample(30:60, 1)`"
} else {
answers[4] <- "The mean of the response variable is at least 50"
}
answers[4
]
if (runif(1) < 0.5) {
answers[4] <- "The mean of the predictor variable is at most `r sample(30:60, 1)`"
} else {
answers[4] <- "The mean of the response variable is at least `r sample(30:60, 1)`"
}
answers[4]
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(dpi = 250)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(fig.height = 3)
knitr::opts_chunk$set(fig.width = 4)
library(knitr)
library(tidyverse)
theme_set(theme_classic())
library(MASS)
survey <- na.omit(survey)
options(ggplot2.continuous.colour="viridis")
scale_colour_discrete <- function(...)   scale_colour_viridis_d()
names(survey)
survey %>% na.omit() %>% ggplot(aes(Pulse, Smoke)) + geom_boxplot()
survey %>% na.omit() %>% ggplot(aes(Smoke, Pulse)) + geom_boxplot()
??mass
survey %>% na.omit() %>% ggplot(aes(Exer, Pulse)) + geom_boxplot()
survey %>% na.omit() %>% ggplot(aes(Smoke, Pulse)) + geom_boxplot()
anova(lm(Pulse ~ Exer, survey %>% na.omit()))
summary(lm(Pulse ~ Exer, survey %>% na.omit()))
anova(lm(Pulse ~ Exer, survey)
)
coef(summary(lm(Pulse ~ Exer, survey %>% na.omit())))
apply(survey$Pulse, survey$Exer, mean)
tapply(survey$Pulse, survey$Exer, mean)
survey %>% na.omit() %>% ggplot(aes(Height, Pulse)) + geom_boxplot()
survey %>% na.omit() %>% ggplot(aes(Height, Pulse)) + geom_jitter()
summary(lm(Pulse ~ Height, survey))
summary(lm(Pulse ~ Height + Sex, survey))
summary(lm(Pulse ~ Height + Exer, survey))
data <- read.delim("C:\\Users\\kongj\\OneDrive - TCDUD.onmicrosoft.com\\Research\\OrthopteraOfIreland\\OrthopteraOfIreland.txt")
data <- read.csv("C:\\Users\\kongj\\OneDrive - TCDUD.onmicrosoft.com\\Research\\OrthopteraOfIreland\\OrthopteraOfIreland.txt", sep = '')
head(data)
data <- read.csv("C:\\Users\\kongj\\OneDrive - TCDUD.onmicrosoft.com\\Research\\OrthopteraOfIreland\\OrthopteraOfIreland.csv")
head(data)
summary(data$Life.stage)
names(data)
with(data, table(TaxonName, Abundance))
summary(data$ZeroAbundance)
summary(data$Habitat.code..Fossitt..2000.)
summary(data$Habitat.description)
library(NicheMapR)
?micro_global
library(memer)
library(memer)
meme_get("ThinkAboutIt") %>%
meme_text_top("Can't fit a linear model") %>%
meme_text_bottom("if the data are not linear")
??memer
??memme_get
exp(cards)
meme_get("HotlineDrake") %>%
meme_text_drake(top = "making a meme in photoshop",
bot = "making a meme in R")
meme_get("DistractedBf") %>%
meme_text_distbf("memes", "me", "class")
meme_get("Philosoraptor") %>%
meme_text_bottom("Is there an R package for memes?")
meme_get("Philosoraptor") %>%
meme_text_top("Is there an R") %>%
meme_text_bottom("package for memes")
meme_get("Batman") %>%
meme_text_bottom(batman = "work", robin = "play")
meme_get("Batman") %>%
meme_text_batman(batman = "work", robin = "play")
meme_get("EvilKermit") %>%
meme_text_kermit(good = "make memes in photoshop", evil = "do it in R")
meme_get("EvilKermit") %>%
meme_text_kermit(good = "make memes in photoshop", dark = "do it in R")
iris %>%
group_by(Species) %>%
summarise(
Sepal.Length = mean(Sepal.Length),
Sepal.Width = mean(Sepal.Width),
Species = n_distinct(Species)
)
library(tidyverse)
iris %>%
group_by(Species) %>%
summarise(
Sepal.Length = mean(Sepal.Length),
Sepal.Width = mean(Sepal.Width),
Species = n_distinct(Species)
)
iris %>%
group_by(Species) %>%
summarise(
Sepal.Length = mean(Sepal.Length),
Sepal.Width = mean(Sepal.Width),
spewcies = n_distinct(Species)
)
rmarkdown::render('Lecture 11 handout.Rmd', output_file = 'C:\\Users\\kongj\\OneDrive - TCDUD.onmicrosoft.com\\jacintak.github.io/my.html')
setwd("C:/Users/kongj/OneDrive - TCDUD.onmicrosoft.com/Teaching/Biostats/Lectures")
setwd("C:/Users/kongj/OneDrive - TCDUD.onmicrosoft.com/Teaching/Biostats/Lectures")
rmarkdown::render('Lecture 11 handout.Rmd', output_file = 'C:\\Users\\kongj\\OneDrive - TCDUD.onmicrosoft.com\\jacintak.github.io/my.html')
mean(trees$Height)
tree_plot +
geom_smooth(method = "lm", se = F, lwd = 2) +
geom_hline(yintercept = mean(trees$Height), colour = "orange", lwd = 2)
ggplot(trees, aes(Height, Girth)) +
geom_smooth(method = "lm", se = F) +
xlab("Predictor variable, X") +
ylab("Response variable, Y") +
theme(axis.ticks = element_blank(),
axis.text = element_blank())
ggplot(trees, aes(Height, Girth)) +
geom_smooth(method = "lm", se = F) +
xlab("Predictor variable, X") +
ylab("Response variable, Y") +
theme(axis.ticks = element_blank(),
axis.text = element_blank())+
annotate("slope", 16, 70, 18, 76)
ggplot(trees, aes(Height, Girth)) +
geom_smooth(method = "lm", se = F) +
xlab("Predictor variable, X") +
ylab("Response variable, Y") +
theme(axis.ticks = element_blank(),
axis.text = element_blank())+
annotate("text", 16, 70, label = "slope")
ggplot(trees, aes(Height, Girth)) +
geom_smooth(method = "lm", se = F) +
xlab("Predictor variable, X") +
ylab("Response variable, Y") +
annotate("text", 16, 70, label = "slope")
ggplot(trees, aes(Height, Girth)) +
geom_smooth(method = "lm", se = F) +
xlab("Predictor variable, X") +
ylab("Response variable, Y") +
annotate("text", 76, 16, label = "slope")
ggplot(trees, aes(Height, Girth)) +
geom_smooth(method = "lm", se = F) +
annotate("text", 76, 16, label = "slope")
ggplot(trees, aes(Height, Girth)) +
geom_smooth(method = "lm", se = F) +
annotate("text", 76, 16, label = "slope", ange = 45)
ggplot(trees, aes(Height, Girth)) +
geom_smooth(method = "lm", se = F) +
annotate("text", 76, 16, label = "slope", angle = 45)
ggplot(trees, aes(Height, Girth)) +
geom_smooth(method = "lm", se = F) +
annotate("text", 76, 16, label = "slope", angle = 20)
ggplot(trees, aes(Height, Girth)) +
geom_smooth(method = "lm", se = F) +
annotate("text", 76, 16, label = "slope", angle = 25)
ggplot(trees, aes(Height, Girth)) +
geom_smooth(method = "lm", se = F) +
annotate("text", 76, 16, label = "slope", angle = 25, size = 20)
ggplot(trees, aes(Height, Girth)) +
geom_smooth(method = "lm", se = F) +
annotate("text", 76, 16, label = "slope", angle = 25, size = 18)
ggplot(trees, aes(Height, Girth)) +
geom_smooth(method = "lm", se = F) +
annotate("text", 76, 16, label = "slope", angle = 25, size = 14)
ggplot(trees, aes(Height, Girth)) +
geom_smooth(method = "lm", se = F) +
annotate("text", 76, 16, label = "slope", angle = 25, size = 10)
ggplot(trees, aes(Height, Girth)) +
geom_smooth(method = "lm", se = F) +
annotate("text", 76, 14, label = "slope", angle = 25, size = 10)
ggplot(trees, aes(Girth, Height)) +
geom_smooth(method = "lm", se = F) +
xlab("Predictor variable, X") +
ylab("Response variable, Y") +
theme(axis.ticks = element_blank(),
axis.text = element_blank())+
annotate("text", 76, 14, label = "slope", angle = 25, size = 10) +
annotate("text", 0, 10, label = "intercept", size = 10)
ggplot(trees, aes(Girth, Height)) +
geom_smooth(method = "lm", se = F) +
xlab("Predictor variable, X") +
ylab("Response variable, Y") +
theme(axis.ticks = element_blank(),
axis.text = element_blank())+
annotate("text", 14, 76, label = "slope", angle = 25, size = 10) +
annotate("text", 10, 0, label = "intercept", size = 10)
ggplot(trees, aes(Girth, Height)) +
geom_smooth(method = "lm", se = F) +
xlab("Predictor variable, X") +
ylab("Response variable, Y") +
theme(axis.ticks = element_blank(),
axis.text = element_blank())+
annotate("text", 14, 76, label = "slope", angle = 25, size = 10) +
annotate("text", 10, 10, label = "intercept", size = 10)
ggplot(trees, aes(Girth, Height)) +
geom_smooth(method = "lm", se = F) +
xlab("Predictor variable, X") +
ylab("Response variable, Y") +
theme(axis.ticks = element_blank(),
axis.text = element_blank())+
annotate("text", 0, 10, label = "slope", angle = 25, size = 10) +
annotate("text", 14, 76, label = "intercept", size = 10)
ggplot(trees, aes(Girth, Height)) +
geom_smooth(method = "lm", se = F) +
annotate("text", 0, 10, label = "slope", angle = 25, size = 10) +
annotate("text", 14, 76, label = "intercept", size = 10)
ggplot(trees, aes(Girth, Height)) +
geom_smooth(method = "lm", se = F)
ggplot(trees, aes(Girth, Height)) +
geom_smooth(method = "lm", se = F)+
annotate("text", 14, 76, label = "slope", angle = 25, size = 10) +
annotate("text", 8, 70, label = "intercept", size = 10)
ggplot(trees, aes(Girth, Height)) +
geom_smooth(method = "lm", se = F)+
annotate("text", 14, 76, label = "slope", angle = 25, size = 10) +
annotate("text", 10, 70, label = "intercept", size = 10)
ggplot(trees, aes(Girth, Height)) +
geom_smooth(method = "lm", se = F)+
annotate("text", 14, 76, label = "slope", angle = 25, size = 10) +
annotate("text", 10, 71, label = "intercept", size = 10)
ggplot(trees, aes(Girth, Height)) +
geom_smooth(method = "lm", se = F) +
xlab("Predictor variable, X") +
ylab("Response variable, Y") +
theme(axis.ticks = element_blank(),
axis.text = element_blank()) +
annotate("text", 14, 76, label = "slope", angle = 25, size = 10) +
annotate("text", 10, 71, label = "intercept", size = 10)
ggplot(trees, aes(Girth, Height)) +
geom_smooth(method = "lm", se = F) +
xlab("Predictor variable, X") +
ylab("Response variable, Y") +
theme(axis.ticks = element_blank(),
axis.text = element_blank()) +
annotate("text", 14, 76, label = "slope", angle = 40) +
annotate("text", 14, 71, label = "intercept")
ggplot(trees, aes(Girth, Height)) +
geom_smooth(method = "lm", se = F) +
xlab("Predictor variable, X") +
ylab("Response variable, Y") +
theme(axis.ticks = element_blank(),
axis.text = element_blank()) +
annotate("text", 14, 76, label = "slope", angle = 40) +
annotate("text", 10, 71, label = "intercept")
ggplot(mammals, aes(sample=brain)) +
stat_qq() +
stat_qq_line() +  # also qqnorm()
ylab("Brain size")
lm_bb <- lm(brain ~ body, mammals) # our linear model
ggplot(lm_bb, aes(sample = rstandard(lm_bb))) +
geom_qq() +
stat_qq_line() + # plot standardised residuals
ylab("Residuals")
lm_bb <- lm(log(brain) ~ body, mammals) # our linear model
ggplot(lm_bb, aes(sample = rstandard(lm_bb))) +
geom_qq() +
stat_qq_line() + # plot standardised residuals
ylab("Standardised residuals")
par(mfrow=c(1,2))
plot(lm((brain) ~ body, mammals) , which=c(3), main = "untransformed")
plot( lm(log(brain) ~ log(body), mammals) , which=c(3), main = "transformed")
par(mfrow=c(2,2), mar = c(3,3,3,3))
plot(lm(log(brain) ~ log(body), mammals))
par(mfrow=c(2,2))
plot(lm(log(brain) ~ log(body), mammals))
par(mfrow=c(2,2))
plot(lm(log(brain) ~ log(body), mammals))
rmarkdown::render(input = "C:\\Users\\kongj\\OneDrive - TCDUD.onmicrosoft.com\\Teaching\\Biostats\\Lectures\\biostats-GLM1.Rmd", output_file = "C:\\Users\\kongj\\OneDrive - TCDUD.onmicrosoft.com\\Teaching\\Biostats\\Lectures\\Lecture-11-handout.html")
